using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

using WestWindSystem.BLL;
using WestWindSystem.Entities;

namespace WebApp.Pages.Samples
{
    public class CRUDProductModel : PageModel
    {
        #region Private service fields & class constructor
        private readonly ILogger<IndexModel> _logger;
        private readonly ProductServices _productServices;
        private readonly CategoryServices _categoryServices;
        private readonly SupplierServices _supplierServices;


        public CRUDProductModel(ILogger<IndexModel> logger,
            ProductServices productservices,
            CategoryServices categoryservices,
            SupplierServices supplierservices)
        {
            _logger = logger;
            _productServices = productservices;
            _categoryServices = categoryservices;
            _supplierServices = supplierservices;

        }
        #endregion

        #region Feedback and Error Messages

        [TempData]
        public string Feedback { get; set; }

        public bool HasFeedback => !string.IsNullOrWhiteSpace(Feedback);

        public string ErrorMessage { get; set; }

        public bool HasError => !string.IsNullOrWhiteSpace(ErrorMessage);

        #endregion


        [BindProperty]
        public Product ProductInfo { get; set; }

        [BindProperty(SupportsGet =true)]
        public int? productid { get; set; }

        //adding a =new() to the List<T> declaration ensures that you have AT MINIMUM
        //  a list instance WHICH will be empty until you fill it.
        [BindProperty]
        public List<Category> CategoryList { get; set; } = new();

        [BindProperty]
        public List<Supplier> SupplierList { get; set; } = new();
        public void OnGet()
        {
            // the OnGet executes the first time the page is generated
            // then on each Get request issued by the page (such as on RedirectToPage(),  PRG)
            PopulateLists();
            if(productid.HasValue && productid.Value > 0)
            {
                ProductInfo = _productServices.Product_GetById(productid.Value);
            }
        }

        public void PopulateLists()
        {
            CategoryList = _categoryServices.Category_List();
            SupplierList = _supplierServices.Supplier_List();
        }

        public IActionResult OnPostClear()
        {
            Feedback = "";
            //productid = null;
            ModelState.Clear();
            return RedirectToPage(new { productid = (int?)null });
        }

        public IActionResult OnPostSearch()
        {
            return Redirect("/Samples/CategoryProducts");
        }

        public IActionResult OnPostNew()
        {
            //forces client side validation to re-execute
            if (ModelState.IsValid)
            {
                //the try/catch error handling is used to catch errors
                //   generated by the execution of the BLL service
                try
                {
                    //any BindProperty will have the current control contents
                    //  in the property
                    //if you expect to receive a value from the BLL service
                    //  you can caught the value in a local variable
                    //In our example, I am expecting the new product id to
                    //  be returned from the BLL service
                    int newproductid = _productServices.Product_AddProduct(ProductInfo);

                    //always give feedback to the client user
                    Feedback =$"Product id ({newproductid}) has been added to the system";

                    //return needed due to IActionResult
                    return RedirectToPage(new { productid = newproductid });
                }
                catch (ArgumentNullException ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    //reload ANY lists that are being used on your form
                    // example: a list (collection) for a drop down control
                    PopulateLists();
                    //stay on the "same" page
                    //the idea is not to "leave" the current request
                    //this is required because you are using IActionResult as
                    //  a return datatype for this method
                    return Page();
                }
                catch (Exception ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    //reload ANY lists that are being used on your form
                    // example: a list (collection) for a drop down control
                    PopulateLists();
                    //stay on the "same" page
                    //the idea is not to "leave" the current request
                    //this is required because you are using IActionResult as
                    //  a return datatype for this method
                    return Page();
                }
            }
            else
            {
                //if you are using ModelState AND are in need of re-populating lists
                // (for select or group of radiobuttons, etc)
                // you will need to re-obtain the lists
                PopulateLists();
            }
            return Page();
        }

        public IActionResult OnPostUpdate()
        {
            if (ModelState.IsValid)
            {
                try
                {
                    int rowaffected = _productServices.Product_UpdateProduct(ProductInfo);
                    if (rowaffected > 0)
                    {
                        Feedback =$"Product id ({rowaffected}) has been update on the system";
                    }
                    else
                    {
                        Feedback = "No product was affected. Refesh search and try again.";
                    }
                    return RedirectToPage(new { productid = productid });
                }
                catch (ArgumentNullException ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    PopulateLists();
                    return Page();
                }
                catch (Exception ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    PopulateLists();
                    return Page();
                }
            }
            else
            {
                //if you are using ModelState AND are in need of re-populating lists
                // (for select or group of radiobuttons, etc)
                // you will need to re-obtain the lists
                PopulateLists();
            }
            return Page();
        }

        public IActionResult OnPostDelete()
        {
            if (ModelState.IsValid)
            {
                try
                {
                    //this is a logical delete (really an update)
                    int rowaffected = _productServices.Product_DeleteProduct(ProductInfo);
                    if (rowaffected > 0)
                    {
                        Feedback =$"Product id ({rowaffected}) has been discontinued on the system";
                    }
                    else
                    {
                        Feedback = "No product was affected. Refesh search and try again.";
                    }
                    return RedirectToPage(new { productid = productid });
                }
                catch (ArgumentNullException ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    PopulateLists();
                    return Page();
                }
                catch (Exception ex)
                {
                    ErrorMessage = GetInnerException(ex).Message;
                    PopulateLists();
                    return Page();
                }
            }
            else
            {
                //if you are using ModelState AND are in need of re-populating lists
                // (for select or group of radiobuttons, etc)
                // you will need to re-obtain the lists
                PopulateLists();
            }
            return Page();
        }



        private Exception GetInnerException(Exception ex)
        {
            //drill down to the REAL ERROR message
            while (ex.InnerException != null)
                ex = ex.InnerException;
            return ex;
        }


    }
}
